generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------------------
/// Models
/// ---------------------

model User {
  id           String   @id @default(cuid())
  name         String
  email        String   @unique
  passwordHash String? // nullable when OAuth-only users
  role         Role
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  // Profile fields
  avatarUrl        String?
  phone            String?
  branch           String?
  semester         Int?
  year             Int?
  premiumExpiresAt DateTime?

  // relations
  teacherProfile   Teacher?         @relation("UserToTeacher")
  studentProfile   Student?         @relation("UserToStudent")
  attendance       Attendance[]     @relation("UserAttendance")
  premiumFeatures  PremiumFeature[] @relation("UserPremiumFeatures")
  googleTokens     GoogleToken[]
  recentActivities RecentActivity[]
  supportRequests  SupportRequest[]
  messagesSent     Message[]        @relation("MessageSender")
  messagesReceived Message[]        @relation("MessageReceiver")
  notifications    Notification[]
}

model Teacher {
  id          String   @id @default(cuid())
  user        User     @relation("UserToTeacher", fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
  department  String?
  designation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // relations
  teacherSubjects TeacherSubject[]
  classSessions   ClassSession[]
  announcements   Announcement[]   @relation("AnnouncementAuthor")
  assignments     Assignment[]
}

model Student {
  id         String   @id @default(cuid())
  user       User     @relation("UserToStudent", fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @unique
  rollNumber String?
  semesterId String?
  sectionId  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  semester Semester? @relation("StudentSemester", fields: [semesterId], references: [id])
  section  Section?  @relation("StudentSection", fields: [sectionId], references: [id])

  attendances Attendance[] @relation("StudentAttendance")
  submissions Submission[]
  grades      Grade[]
}

model Semester {
  id        String   @id @default(cuid())
  name      String
  number    Int?
  createdAt DateTime @default(now())

  teacherSubjects TeacherSubject[]
  classSessions   ClassSession[]   @relation("SemesterSessions")
  students        Student[]        @relation("StudentSemester")
}

model Section {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  teacherSubjects TeacherSubject[]
  classSessions   ClassSession[]   @relation("SectionSessions")
  students        Student[]        @relation("StudentSection")
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String?  @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacherSubjects  TeacherSubject[]
  classSessions    ClassSession[]    @relation("ClassSessionSubject")
  assignments      Assignment[]
  resources        Resource[]
  exams            Exam[]
  attendanceTokens AttendanceToken[]
}

model TeacherSubject {
  id String @id @default(cuid())

  teacher   Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade, map: "fk_teachersubject_teacher")
  teacherId String

  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade, map: "fk_teachersubject_subject")
  subjectId String

  semester   Semester @relation(fields: [semesterId], references: [id], map: "fk_teachersubject_semester")
  semesterId String

  section   Section @relation(fields: [sectionId], references: [id], map: "fk_teachersubject_section")
  sectionId String

  @@unique([teacherId, subjectId, semesterId, sectionId], map: "uq_teachersubject_unique")
}

model ClassSession {
  id String @id @default(cuid())

  // legacy scalar subject (kept for compatibility)
  subject String?

  subjectId  String?
  subjectRel Subject? @relation("ClassSessionSubject", fields: [subjectId], references: [id], map: "fk_classsession_subject")

  semester  Int
  section   String
  weekday   Weekday
  room      String?
  startTime DateTime
  endTime   DateTime

  teacherId String
  teacher   Teacher @relation(fields: [teacherId], references: [id], map: "fk_classsession_teacher")

  // Add proper relations to Semester and Section
  semesterId  String?
  semesterRel Semester? @relation("SemesterSessions", fields: [semesterId], references: [id], map: "fk_classsession_semester")

  sectionId  String?
  sectionRel Section? @relation("SectionSessions", fields: [sectionId], references: [id], map: "fk_classsession_section")

  status           SessionStatus @default(UPCOMING)
  attendanceMarked Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  attendances Attendance[] @relation("ClassSessionAttendance")

  @@index([teacherId, weekday, semester], map: "idx_classsession_teacher_weekday_semester")
}

model Attendance {
  id String @id @default(cuid())

  classSessionId String?
  classSession   ClassSession? @relation("ClassSessionAttendance", fields: [classSessionId], references: [id], map: "fk_attendance_classsession")

  studentId String?
  student   Student? @relation("StudentAttendance", fields: [studentId], references: [id], map: "fk_attendance_student")

  userId String?
  user   User?   @relation("UserAttendance", fields: [userId], references: [id], map: "fk_attendance_user")

  status   AttendanceStatus
  markedBy String?
  markedAt DateTime?        @default(now())
  remarks  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([classSessionId, studentId], map: "uq_attendance_session_student")
  @@index([classSessionId], map: "idx_attendance_classsession")
}

model AttendanceToken {
  id          String   @id @default(cuid())
  token       String   @unique
  subjectId   String?
  subject     Subject? @relation(fields: [subjectId], references: [id], map: "fk_attendancetoken_subject")
  professorId String
  issuedAt    DateTime @default(now())
  expiresAt   DateTime
  used        Boolean  @default(false)
}

model Event {
  id          String   @id @default(cuid())
  title       String
  date        DateTime
  type        String
  description String?
  active      Boolean  @default(true)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Assignment {
  id          String       @id @default(cuid())
  title       String
  description String?
  subjectId   String
  subject     Subject      @relation(fields: [subjectId], references: [id], onDelete: Cascade, map: "fk_assignment_subject")
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id], map: "fk_assignment_teacher")
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  attachments Resource[]
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], map: "fk_submission_assignment")
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id], map: "fk_submission_student")
  submittedAt  DateTime   @default(now())
  fileUrl      String?
  text         String?
  grade        Float?
  feedback     String?
  gradedBy     String?
  gradedAt     DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([assignmentId], map: "idx_submission_assignment")
}

model Announcement {
  id             String     @id @default(cuid())
  title          String
  message        String
  authorId       String
  author         Teacher    @relation("AnnouncementAuthor", fields: [authorId], references: [id], map: "fk_announcement_author")
  targetAll      Boolean    @default(false)
  targetSemester Int?
  targetSection  String?
  attachments    Resource[]
  createdAt      DateTime   @default(now())
  expiresAt      DateTime?
  isActive       Boolean    @default(true)
}

model Resource {
  id             String        @id @default(cuid())
  title          String
  description    String?
  url            String
  uploadedBy     String?
  subjectId      String?
  subject        Subject?      @relation(fields: [subjectId], references: [id], map: "fk_resource_subject")
  assignmentId   String?
  assignment     Assignment?   @relation(fields: [assignmentId], references: [id], map: "fk_resource_assignment")
  announcementId String?
  announcement   Announcement? @relation(fields: [announcementId], references: [id], map: "fk_resource_announcement")
  messageId      String?
  message        Message?      @relation(fields: [messageId], references: [id], map: "fk_resource_message")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Exam {
  id          String   @id @default(cuid())
  title       String
  subjectId   String
  subject     Subject  @relation(fields: [subjectId], references: [id], map: "fk_exam_subject")
  date        DateTime
  durationMin Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  grades Grade[]
}

model Grade {
  id        String   @id @default(cuid())
  examId    String
  exam      Exam     @relation(fields: [examId], references: [id], map: "fk_grade_exam")
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], map: "fk_grade_student")
  marks     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([examId, studentId], map: "uq_grade_exam_student")
}

model Message {
  id          String     @id @default(cuid())
  senderId    String
  sender      User       @relation("MessageSender", fields: [senderId], references: [id], map: "fk_message_sender")
  receiverId  String
  receiver    User       @relation("MessageReceiver", fields: [receiverId], references: [id], map: "fk_message_receiver")
  content     String
  attachments Resource[]
  read        Boolean    @default(false)
  createdAt   DateTime   @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], map: "fk_notification_user")
  title     String
  body      String
  meta      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model PremiumFeature {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  users       User[]   @relation("UserPremiumFeatures")
  createdAt   DateTime @default(now())
}

model GoogleToken {
  userId       String    @id
  accessToken  String
  refreshToken String?
  scope        String?
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model RecentActivity {
  id        String   @id @default(cuid())
  userId    String?
  userName  String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  metadata  Json?
  timestamp DateTime @default(now())
}

model SupportRequest {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], map: "fk_supportrequest_user")
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model PlanConfig {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Int
  features  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/// ---------------------
/// Enums
/// ---------------------

enum Role {
  STUDENT
  TEACHER
  ADMIN
  ASSISTANT
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum SessionStatus {
  UPCOMING
  COMPLETED
  CANCELLED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  PENDING
}
