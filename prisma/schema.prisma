generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(cuid())
  name             String
  email            String           @unique
  role             Role
  attendance       Attendance[]
  isPremium        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  premiumFeatures  PremiumFeature[] @relation("UserPremiumFeatures")
  premiumExpiresAt DateTime?
  GoogleToken      GoogleToken[]
  RecentActivity   RecentActivity[]
  branch           String?
  year             Int?
  semester         Int?

  TeacherProfile   Teacher?
}

model Teacher {
  id          String           @id @default(cuid())
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String           @unique
  subjects    TeacherSubject[]
  department  String?
  designation String?
  classes     ClassSession[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model TeacherSubject {
  id         String   @id @default(cuid())
  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  teacherId  String

  subject    Subject  @relation(fields: [subjectId], references: [id])
  subjectId  String

  semester   Semester @relation(fields: [semesterId], references: [id])
  semesterId String

  section    Section  @relation(fields: [sectionId], references: [id])
  sectionId  String
}

model Attendance {
  id        String   @id @default(uuid())
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  subject   String
  date      DateTime @default(now())
  status    String
  markedBy  String
}

model AttendanceToken {
  id          String   @id @default(uuid())
  token       String   @unique
  subject     String
  professorId String
  issuedAt    DateTime @default(now())
  expiresAt   DateTime
}

model PremiumFeature {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]   @relation("UserPremiumFeatures")
  createdAt DateTime @default(now())
}

model Event {
  id          String    @id @default(cuid())
  title       String
  description String?
  date        DateTime
  type        EventType
  active      Boolean   @default(true)
  createdBy   String
  createdAt   DateTime  @default(now())
}

model GoogleToken {
  userId       String   @id
  accessToken  String
  refreshToken String?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model RecentActivity {
  id        String   @id @default(cuid())
  userId    String?
  userName  String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  action    String
  timestamp DateTime @default(now())
}

model SupportRequest {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}

model PlanConfig {
  id        String   @id @default(cuid())
  name      String   @unique
  price     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassSession {
  id        String        @id @default(cuid())
  subject   Subject       @relation(fields: [subjectId], references: [id])
  subjectId String
  section   String
  semester  Int
  weekday   Weekday
  room      String?
  startTime DateTime
  endTime   DateTime
  teacher   Teacher       @relation(fields: [teacherId], references: [id])
  teacherId String
  status    SessionStatus @default(UPCOMING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([teacherId, weekday, semester])
}

model Subject {
  id        String           @id @default(cuid())
  name      String
  code      String?          @unique
  classes   ClassSession[]
  teacherSubjects TeacherSubject[]
}

model Semester {
  id       String            @id @default(cuid())
  name     String
  subjects TeacherSubject[]
}

model Section {
  id       String            @id @default(cuid())
  name     String
  subjects TeacherSubject[]
}

enum Weekday {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum SessionStatus {
  UPCOMING
  COMPLETED
}

enum EventType {
  HOLIDAY
  EXAM
  EVENT
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

enum PremiumFeatureType {
  AI_CHATBOT
  STUDY_PLAN
  CALENDAR_SYNC
}
